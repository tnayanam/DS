// Dictionary
A C# Dictionary is a generic data structure added to the .NET Framework in version 2.0. It is a way to store key/value pairs. In contrast, a List (or ArrayList) can only store values.
Dictionary<string, int> dictionary = new Dictionary<string, int>();
Adding data to a dictionary is similar to adding values to a List, except that it takes a key and value argument:

dictionary.Add("1", 1);
Once data is stored inside a C# dictionary, you use the key values as indices to retrieve values. To put it in context, a List uses numbers as keys (indices) to get its values:

int j = dictionary["1"];
Traversing a dictionary (going through each element) is tricky because the keys can be anything within its data type. The only way to access all the values in a C# dictionary is to know all the keys. That is when the Keys property comes in, which holds a collection of any key added. Here is an example on iterating through a C# dictionary:

List<string> keys = new List<string>(dictionary.Keys);
for (int i = 0; i < keys.Count; i++)
{
    int j = dictionary[keys[i]];
}
As mentioned before, the above operations work the same way on a SortedDictionary.

Dictionary vs. SortedDictionary
The difference between Dictionary and SortedDictionary start with the obvious. A Dictionary keeps elements in the order the were added. Meanwhile a SortedDictionary keeps elements sorted based on their comparer.

For example, adding the following key/value pairs to a Dictionary and then outputting the values in order would yield: (1, 1), (3, 3), (2, 2), (4, 4) -> 1, 3, 2, 4.

Adding the same input to a SortedDictionary would result in 1, 2, 3, 4. So elements are automatically sorted in a SortedDictionary.

The result is advantages and disadvantages for each data structure that have to be considered to choose the best one for a task.

Dictionary
Two things to consider: insertion time and searching time. Because elements are not automatically sorted, inserting elements is faster.

Similarly because elements are not sorted, it makes searching more complicated, meaning searching is slower.

SortedDictionary
In a SortedDictionary elements must be sorted when they are added, making insertion times slower.

But since elements are kept stored, searching can be done with binary search, meaning searching is faster.hmm


How to decided which data strcuture to use
1. cost of operations
2. Memory Usage
3. What needs to be stored
Tree is a non linear data structure
top most node is called root of the tree
each node contains some data and may contain link and refernce to some other node which are called children
node with no child are called leaf nodes
tree is a recursive data structure
tree ios used when we have heirarchical data structure
a trss iwth n node has n-1 links because root does not have any incoming links

              1                     depth = 0
			  
     2                  3           depth = 1   height = 2 because the longest edge is from 8->6->7 it is not 1 which is from 7->3

4	     5         6          7     depth = 2

                 8

depth -> number of edges to reach that node from root.
height -> number of edges in longest path root to leaf
height of tree is same as height of root
depth and height can be or cannot be equal.
Binary tree is a tree with atmost 2 children
maximum number of nodes at any given level i us 2^i i is the depth here
height of empty tree = -1
height of tree with 1 node = 0

if maximum diff at any node is <=1 then it is a balanced binary tree if not then not balanced.

Binary Search Tree
why trees:  suppose we want to search, insert and delete a data what DS we should use
option 1: array
Search - O(n)
Insert - O(1)
Removal - O(n)
option 2: LL
Search - O(n)
Insert - O(1)
Removal - O(n)
Array Sorted
Search - O(logn)
Insert - O(n)
Removal - O(n)
BST- Good
Search - O(logn)
Insert - O(logn)
Removal - O(logn)
BST: A tree in which value of node of left subtree is lesser or equal than value of node in right subtree 







